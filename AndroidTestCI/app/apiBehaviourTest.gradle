apply from: 'utils.gradle'
apply from: 'taskHelper.gradle'
apply from: 'globalTasks.gradle'

ext {
    generateApiBehaviourTestTask = this.&generateApiBehaviourTestTask
}

def generateApiBehaviourTestTask(taskNameSpace, variantName, pkg, device) {
    def testTask = tasks.create(taskNameSpace) << {
        println adbShell(device, "am instrument -w -e package hcfs.test.testsuite.api.behaviour hcfs.test.testsuite.test/android.support.test.runner.AndroidJUnitRunner")
        adb(device, "pull /sdcard/report ${PROJ_BUILD_DIR}")
    }
    def installTask = tasks.findByName("install${variantName}")
    def uninstallAllTask = tasks.findByName("uninstallAll")
    def installAndroidTestTask = tasks.findByName("install${variantName}AndroidTest")
    def grantHCFSFileSystemPermTask = getGrantHCFSFileSystemPermTask(taskNameSpace, device)
    def grantPermissionTask = getGrantAppPermissionsFromFileTask(taskNameSpace, device, pkg, TEST_PERM_FILE)
    def genTestReportTask = getGenTestReportTask(taskNameSpace)
    def setupTask = getSetupTask(taskNameSpace, device, setup(device))
    def teardownTask = getTeardownTask(taskNameSpace, device, teardown(device))
    def copyResultTask = tasks.findByName("copyResultTask")

    grantPermissionTask.dependsOn installTask, installAndroidTestTask
    testTask.dependsOn grantPermissionTask, setupTask, grantHCFSFileSystemPermTask
    testTask.finalizedBy teardownTask, copyResultTask, uninstallAllTask
    copyResultTask.finalizedBy genTestReportTask
}

def setup(device) {
    return  {
        downloadTestAppApks(TEST_APPS_FILE, REMOTE_APKS_URL)
        pushTestAppApks(device, TEST_APPS_FILE)
        installTestApps(device, TEST_APPS_FILE)
        setenforce(device, 0)
    }
}

def teardown(device) {
    return  {
        setenforce(device, 1)
    }
}
